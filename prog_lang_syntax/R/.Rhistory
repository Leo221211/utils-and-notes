help(lm)
help(mtext)
help(axis)
require(stats) # for rnorm
plot(1:4, rnorm(4), axes = FALSE)
axis(1, 1:4, LETTERS[1:4])
require(stats) # for rnorm
plot(1:4, rnorm(4), axes = FALSE)
axis(2, 1:4, LETTERS[1:4])
require(stats) # for rnorm
plot(1:4, rnorm(4), axes = FALSE)
axis(3, 1:4, LETTERS[1:4])
help(box)
help(curve)
help("par")
help("pars")
help("par")
help("par")
help("par")
10:2:-2
help("segments")
### 4.2 create dataframe
```
### 4.2 create dataframe
```
member <- data.frame(
name = c("Tom", "May"),
age = c(22, 20)
)
member
# Q1a
par(mfrow=c(1, 1))
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
par(mfrow=c(1, 1))
plot(pressure$temperature,(pressure$pressure)^(3/20))
# The linear relationship is evident now
abline(0.168,0.007)
# Q1c
title(main="Plot of pressure^(3/20) against temperature")
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
plot(pressure$temperature,(pressure$pressure)^(3/20))
# Linear relationship
abline(0.168,0.007)
# Q1c
plot(pressure$temperature,pressure$pressure, main = "Relationship between pressure and temperature")
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1d
par(mfrow=c(1,2))
plot(pressure$temperature,pressure$pressure, bty='n', las=1)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
clear
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
plot(pressure$temperature,(pressure$pressure)^(3/20))
# Linear relationship
abline(0.168,0.007)
# Q1c
plot(pressure$temperature,pressure$pressure, main = "Relationship between pressure and temperature")
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1a
par(mfrow=c(1, 1))
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
par(mfrow=c(1, 1))
plot(pressure$temperature,(pressure$pressure)^(3/20))
# The linear relationship is evident now
abline(0.168,0.007)
# Q1c
title(main="Plot of pressure^(3/20) against temperature")
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
plot(pressure$temperature,(pressure$pressure)^(3/20))
# Linear relationship
abline(0.168,0.007)
# Q1c
plot(pressure$temperature,pressure$pressure, main = "Relationship between pressure and temperature")
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
plot(pressure$temperature,(pressure$pressure)^(3/20))
# Linear relationship
abline(0.168,0.007)
# Q1c
plot(pressure$temperature,pressure$pressure, main = "Relationship between pressure and temperature")
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1d
par(mfrow=c(1,2))
plot(pressure$temperature,pressure$pressure, bty='n', las=1)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
plot(pressure$temperature,(pressure$pressure)^(3/20), bty='n', las=1)
abline(0.168,0.007)
# Q2
alt_matrix <- function(n) {
A = matrix(0, ncol = n, nrow = n)
for (i in 1:n) {
for (j in 1:n) {
if ((i+j)%%2)
A[i,j] = 1
}
}
return(A)
}
# alternative answer
alt_matrix <- function(n) {outer(1:n, 1:n, "+")%%2}
alt_matrix(9)
# Q3
d <- 1 # distance between lines
bl <- c(-d,0) # bottom left
br <- c(10,0) # bottom right
tl <- c(0,10) # top left
tr <- c(10,10) # top right
plot(0, 0, type="n", xlim=c(0,10), ylim=c(0,10),
bty="n", xlab="", ylab="")
phase <- 0
while (bl[1]<=br[1]) {
phase <- (phase + 1)%%4
if (phase == 1) { # bottom line: left to right
segments(max(bl[1],0),bl[2],br[1],br[2], col="red")
bl = bl + c(d,d)
} else if (phase == 2) { # right line: bottom to top
segments(br[1],br[2],tr[1],tr[2], col="orange")
br <- br + c(-d,d)
} else if (phase == 3) { # top line: right to left
segments(tr[1],tr[2],tl[1],tl[2], col="green")
tr <- tr + c(-d,-d)
} else if (phase == 0) { # left line: top to bottom
segments(tl[1],tl[2],bl[1],bl[2], col="blue")
tl <- tl + c(d,-d)
}
}
# Version 1
prime_list <- function(n) {
if (n >= 2) {
comp <- seq(2, n)
primes <- c()
for (i in seq(2, n)) {
if (any(comp == i)) {
primes <- c(primes, i)
comp <- comp[(comp %% i) != 0]
}
}
return(primes)
} else {
stop("Input value of n should be at least 2.")
}
}
twin_prime_list <- function(n) {
if (n >= 5) {
primes <- prime_list(n)
tprimes <- c()
for (i in 1:(length(primes)-1)) {
if (primes[i+1] == primes[i]+2) {
tprimes <- c(tprimes, primes[i], primes[i+1])
}
}
return(unique(tprimes))
} else if (n >= 3) {
return(3)
} else {
stop("Input value of n should be at least 3.")
}
}
twin_prime_list(1000)
# Version 2
twin_prime_list2 <- function(n) {
if (n >= 5) {
comp <- seq(2, n)
primes <- c()
tprimes <- c()
for (i in seq(2, n)) {
if (any(comp == i)) {
primes <- c(primes, i)
comp <- comp[(comp %% i) != 0]
l <- length(primes)
if (l>=2) {
if (primes[l] == primes[l-1]+2) {
tprimes <- c(tprimes, primes[l-1], primes[l])
}
}
}
}
return(unique(tprimes))
} else if (n >= 3) {
return(3)
} else {
stop("Input value of n should be at least 3.")
}
}
twin_prime_list2(1000)
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1a
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
plot(pressure$temperature,(pressure$pressure)^(3/20))
# Linear relationship
abline(0.168,0.007)
# Q1c
plot(pressure$temperature,pressure$pressure, main = "Relationship between pressure and temperature")
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1a
par(mfrow=c(1, 1))
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
par(mfrow=c(1, 1))
plot(pressure$temperature,(pressure$pressure)^(3/20))
# The linear relationship is evident now
abline(0.168,0.007)
# Q1c
title(main="Plot of pressure^(3/20) against temperature")
# Q1d
par(mfrow=c(1,2))
plot(pressure$temperature,pressure$pressure, bty='n', las=1)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
plot(pressure$temperature,(pressure$pressure)^(3/20), bty='n', las=1)
abline(0.168,0.007)
# Q1d
par(mfrow=c(1,2))
plot(pressure$temperature,pressure$pressure, bty='n', las=1)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
plot(pressure$temperature,(pressure$pressure)^(3/20), bty='n', las=1)
abline(0.168,0.007)
# Q2
alt_matrix <- function(n) {
A = matrix(0, ncol = n, nrow = n)
for (i in 1:n) {
for (j in 1:n) {
if ((i+j)%%2)
A[i,j] = 1
}
}
return(A)
}
# alternative answer
alt_matrix <- function(n) {outer(1:n, 1:n, "+")%%2}
alt_matrix(9)
# Q2
alt_matrix = function(n) {
(row(matrix(0, n, n)) + col(matrix(0, n, n))) %% 2
}
alt_matrix(7)
# Q3
par(mfrow=c(1, 1))
plot(0, 0, type="n", xlim=c(0, 10), ylim=c(0, 10), bty="n", xlab="", ylab="")
line_lens = c(10, rep(seq(10, 1), each=2))
start = c(0, 0)
config = data.frame(
colors = c("red", "orange", "green", "blue"),    # colors of Bottom, right, up, left
directions = I(list(c(1, 0), c(0, 1), c(-1,0), c(0, -1)))  # direction of the growing line
)
for (i in seq_along(line_lens)){
# get config
len = line_lens[i]
color = config$colors[(i-1) %% 4 + 1]
dir = config$directions[[(i-1) %% 4 + 1]]
# print(paste(len, color, dir))
# print(dir)
# draw
end = start + len * dir
print(paste("Start:", toString(start), "End:", toString(end)))
segments(x0=start[1], y0=start[2], x1=end[1], y1=end[2], col=color)
# update
start = end
}
# Q3
d <- 1 # distance between lines
bl <- c(-d,0) # bottom left
br <- c(10,0) # bottom right
tl <- c(0,10) # top left
tr <- c(10,10) # top right
plot(0, 0, type="n", xlim=c(0,10), ylim=c(0,10),
bty="n", xlab="", ylab="")
phase <- 0
while (bl[1]<=br[1]) {
phase <- (phase + 1)%%4
if (phase == 1) { # bottom line: left to right
segments(max(bl[1],0),bl[2],br[1],br[2], col="red")
bl = bl + c(d,d)
} else if (phase == 2) { # right line: bottom to top
segments(br[1],br[2],tr[1],tr[2], col="orange")
br <- br + c(-d,d)
} else if (phase == 3) { # top line: right to left
segments(tr[1],tr[2],tl[1],tl[2], col="green")
tr <- tr + c(-d,-d)
} else if (phase == 0) { # left line: top to bottom
segments(tl[1],tl[2],bl[1],bl[2], col="blue")
tl <- tl + c(d,-d)
}
}
#Q4
is_prime = function(n) {
if (n <= 1) {
return(FALSE)
}
if (n == 2) {
return (TRUE)
}
for (i in 2:sqrt(n)) {
if (n %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
primes = c()
for (i in seq(1:1000-3)) {
if (is_prime(i) && is_prime(i+2)) {
primes = c(primes, i, i+2)
}
}
unique(primes)
# Version 1
prime_list <- function(n) {
if (n >= 2) {
comp <- seq(2, n)
primes <- c()
for (i in seq(2, n)) {
if (any(comp == i)) {
primes <- c(primes, i)
comp <- comp[(comp %% i) != 0]
}
}
return(primes)
} else {
stop("Input value of n should be at least 2.")
}
}
twin_prime_list <- function(n) {
if (n >= 5) {
primes <- prime_list(n)
tprimes <- c()
for (i in 1:(length(primes)-1)) {
if (primes[i+1] == primes[i]+2) {
tprimes <- c(tprimes, primes[i], primes[i+1])
}
}
return(unique(tprimes))
} else if (n >= 3) {
return(3)
} else {
stop("Input value of n should be at least 3.")
}
}
twin_prime_list(1000)
# Version 2
twin_prime_list2 <- function(n) {
if (n >= 5) {
comp <- seq(2, n)
primes <- c()
tprimes <- c()
for (i in seq(2, n)) {
if (any(comp == i)) {
primes <- c(primes, i)
comp <- comp[(comp %% i) != 0]
l <- length(primes)
if (l>=2) {
if (primes[l] == primes[l-1]+2) {
tprimes <- c(tprimes, primes[l-1], primes[l])
}
}
}
}
return(unique(tprimes))
} else if (n >= 3) {
return(3)
} else {
stop("Input value of n should be at least 3.")
}
}
twin_prime_list2(1000)
#Q4
is_prime = function(n) {
if (n <= 1) {
return(FALSE)
}
if (n == 2) {
return (TRUE)
}
for (i in 2:sqrt(n)) {
if (n %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
primes = c()
for (i in seq(1:1000-3)) {
if (is_prime(i) && is_prime(i+2)) {
primes = c(primes, i, i+2)
}
}
unique(primes)
# Q1a
par(mfrow=c(1, 1))
plot(pressure$temperature,pressure$pressure)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
# Q1b
par(mfrow=c(1, 1))
plot(pressure$temperature,(pressure$pressure)^(3/20))
# The linear relationship is evident now
abline(0.168,0.007)
# Q1c
title(main="Plot of pressure^(3/20) against temperature")
# Q1d
par(mfrow=c(1,2))
plot(pressure$temperature,pressure$pressure, bty='n', las=1)
curve((0.168 + 0.007*x)^(20/3), from = 0, to = 400, add = TRUE)
plot(pressure$temperature,(pressure$pressure)^(3/20), bty='n', las=1)
abline(0.168,0.007)
# Q2
alt_matrix = function(n) {
(row(matrix(0, n, n)) + col(matrix(0, n, n))) %% 2
}
alt_matrix(7)
# Q3
par(mfrow=c(1, 1))
plot(0, 0, type="n", xlim=c(0, 10), ylim=c(0, 10), bty="n", xlab="", ylab="")
line_lens = c(10, rep(seq(10, 1), each=2))
start = c(0, 0)
config = data.frame(
colors = c("red", "orange", "green", "blue"),    # colors of Bottom, right, up, left
directions = I(list(c(1, 0), c(0, 1), c(-1,0), c(0, -1)))  # direction of the growing line
)
for (i in seq_along(line_lens)){
# get config
len = line_lens[i]
color = config$colors[(i-1) %% 4 + 1]
dir = config$directions[[(i-1) %% 4 + 1]]
# print(paste(len, color, dir))
# print(dir)
# draw
end = start + len * dir
print(paste("Start:", toString(start), "End:", toString(end)))
segments(x0=start[1], y0=start[2], x1=end[1], y1=end[2], col=color)
# update
start = end
}
#Q4
is_prime = function(n) {
if (n <= 1) {
return(FALSE)
}
if (n == 2) {
return (TRUE)
}
for (i in 2:sqrt(n)) {
if (n %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
primes = c()
for (i in seq(1:1000-3)) {
if (is_prime(i) && is_prime(i+2)) {
primes = c(primes, i, i+2)
}
}
unique(primes)
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
# mqy
